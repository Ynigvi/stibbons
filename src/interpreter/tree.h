/**
 * \file tree.h
 * \brief Tree class header.
 * \author Florian Galinier
 * \author Clément Simon
 * \version 0.1
 * \date 13/03/15
 *
 * Declaration of Tree class (used by Interpreter class).
 *
 */

#pragma once

#include <vector>
#include <utility>
#include <tuple>
#include "y.tab.h"
#include "../model/values.h"

namespace stibbons {
	
	/**
	  * \class Tree
	  * \brief Class that will represent a syntaxic tree.
	  *
	  * This tree will be generated by syntaxic analyser and
	  * can be interpreted.
	  *
	  * \author Florian Galinier
	  * \author Clément Simon
	  */
	class Tree {
	private:
		pair<yy::parser::token_type,Values*> node;
		vector<Tree>* sons;
	public:

		/**
		 * Create a new tree from a token_type and a value
		 * \param token The kind of token that is used to create the node
		 * \param val The value (if needed) corresponding to the token
		 */
		Tree(yy::parser::token_type,Values*);

		/**
		 * Destroy a tree and his sons.
		 *
		 */
		virtual ~Tree();

		/**
		 * Test if the node is a leaf.
		 * \return true is current tree has no sons
		 */
		virtual bool isLeaf() const;

		/**
		 * Return current node.
		 * \return A pair of <token_type,Value> corresponding to current node
		 */
		virtual pair<yy::parser::token_type,Values*> getNode() const;

		/**
		 * Append a son to current tree.
		 * \param token The kind of token that is used to create the son
		 * \param val The value (if needed) corresponding to the son's token
		 */
		virtual void addSon(yy::parser::token_type,Values*);

		/**
		 * Return a son identify by his position
		 * \param pos the position of the needed son
		 * \return the requested son (Tree type)
		 */
		virtual Tree& getSon(size_t pos=0) const;
	};

}

/*
 * Editor modelines  -  http://www.wireshark.org/tools/modelines.html
 *
 * Local variables:
 * c-basic-offset: 4
 * tab-width: 4
 * indent-tabs-mode: t
 * truncate-lines: 1
 * End:
 *
 * vim:set ft=cpp ts=4 sw=4 sts=4
 */
