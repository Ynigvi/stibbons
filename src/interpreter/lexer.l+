%{
#include "flex-scanner.h"
#define YY_NO_UNISTD_H
%}

%option c++ 
%option nodefault 
%option yyclass="FlexScanner" 
%option yywrap nounput

%option case-insensitive

/*Define tokens */
%{
#include <sstream>
#include <cstdlib>
#include "y.tab.h"
#include "../model/nil.h"
#include "../model/number.h"
#include "../model/string.h"
#include "../model/boolean.h"
#include "../model/color.h"

#define YY_USER_ACTION loc->columns(yyleng);
#define yyterminate() {}

  size_t countNewLine(char* str) {
    auto count = 0;
    for(auto i=strlen(str)-1;i>=0;i--) {
      if(str[i] == '\n')
	++count;
      else
	break;
    }

    return count;
  } 

  int yyFlexLexer::yywrap() {
	return 1;
 } 
%}

id [_a-z][\-_a-z0-9]*

%x comment

 /*Rules*/
%%

%{
  loc->step();
%}

true|false { if(yytext[0] == 't' || yytext[0] == 'T') { pyylval->v = make_shared<stibbons::Boolean>(true); } else { pyylval->v = make_shared<stibbons::Boolean>(false); } return yy::parser::token::BOOLEAN;}

null {return yy::parser::token::NIL;}

fd|forward {return yy::parser::token::FD;}

lt|turn-left {return yy::parser::token::LT;}

rt|turn-right {return yy::parser::token::RT;}

pd|pen-down {return yy::parser::token::PD;}

pu|pen-up {return yy::parser::token::PU;}

die {return yy::parser::token::DIE;}

"==" {return yy::parser::token::EQ;}

"!=" {return yy::parser::token::NEQ;}

">" {return yy::parser::token::GT;}

">=" {return yy::parser::token::GEQ;}

"<" {return yy::parser::token::LS;}

"<=" {return yy::parser::token::LEQ;}

and|& {return yy::parser::token::AND;}

or|\| {return yy::parser::token::OR;}

xor|^ {return yy::parser::token::XOR;}

not|! {return yy::parser::token::NOT;}

repeat {return yy::parser::token::RPT;}

while {return yy::parser::token::WHL;}

if {return yy::parser::token::IF;}

else {return yy::parser::token::ELSE;}

new {return yy::parser::token::NEW;} 

agent {return yy::parser::token::AGT;}

function {return yy::parser::token::FCT;}

[0-9]+\.?[0-9]*|\.[0-9]+ {std::istringstream iss(yytext); double n; iss >> n; pyylval->v=make_shared<stibbons::Number>(n); return yy::parser::token::NUMBER;}

(\"(\\\"|[^\"])*\")|('(\\'|[^'])*')|(\"\"\"(.|\\n)*\"\"\")  {pyylval->v=make_shared<stibbons::String>(yytext); return yy::parser::token::STRING;}

#([a-f0-9]{6}|[a-f0-9]{3}) {pyylval->v=make_shared<stibbons::Color>(yytext); return yy::parser::token::COLOR;}

{id} {pyylval->v=make_shared<stibbons::String>(yytext); return yy::parser::token::ID;}

"//"[^\n]*\n* { loc->lines(countNewLine(yytext)); loc->step(); return yy::parser::token_type('\n');}

"/*" {BEGIN(comment);}

<comment>[^*];
<comment>"*"+[^*/]*
<comment>\n\n* {loc->lines(yyleng); loc->step();}
<comment>"*"+"/" {BEGIN(INITIAL);}

"}" { return yy::parser::token_type(yytext[0]);}

[ \r\t]+  {loc->step();}

\n\n* { loc->lines(yyleng); loc->step(); return yy::parser::token_type(yytext[0]);}

. {return yy::parser::token_type(yytext[0]);}

%%

/*
 * Editor modelines  -  http://www.wireshark.org/tools/modelines.html
 *
 * Local variables:
 * mode: c++
 * c-basic-offset: 4
 * tab-width: 4
 * indent-tabs-mode: t
 * truncate-lines: 1
 * End:
 *
 * vim:set ft=cpp ts=4 sw=4 sts=4
 */
