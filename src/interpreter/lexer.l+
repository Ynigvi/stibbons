%{
#include "flex-scanner.h"
#define YY_NO_UNISTD_H
%}

%option c++ 
%option nodefault 
%option yyclass="FlexScanner" 
%option yywrap nounput

%option case-insensitive

/*Define tokens */
%{
#include <sstream>
#include <cstdlib>
#include "y.tab.h"
#include "syntax-exception.h"
#include "../model/nil.h"
#include "../model/number.h"
#include "../model/string.h"
#include "../model/boolean.h"
#include "../model/color.h"
#include "../model/type-value.h"

#define YY_USER_ACTION loc->columns(yyleng);
#define yyterminate() {}

  size_t countNewLine(char* str) {
    auto count = 0;
    for(auto i=strlen(str)-1;i>=0;i--) {
      if(str[i] == '\n')
	++count;
      else
	break;
    }

    return count;
  } 

  int yyFlexLexer::yywrap() {
	return 1;
 } 
%}

id [_a-z][_a-z0-9]*

%x comment
%x spl_quote
%x dbl_quote
%x tpl_quote
%s for_state
%x end

 /*Rules*/
%%
     std::string tmp;
%{
  loc->step();
%}

<INITIAL><<EOF>> { BEGIN(end); return yy::parser::token_type('\n');}
<end><<EOF>> { BEGIN(INITIAL); return 0; }

 /*Creating instruction tokens*/
true|false { if(yytext[0] == 't' || yytext[0] == 'T') { pyylval->v = make_shared<stibbons::Boolean>(true); } else { pyylval->v = make_shared<stibbons::Boolean>(false); } return yy::parser::token::BOOLEAN;}

null {return yy::parser::token::NIL;}

fd|forward {return yy::parser::token::FD;}

lt|turn_left {return yy::parser::token::LT;}

rt|turn_right {return yy::parser::token::RT;}

pd|pen_down {return yy::parser::token::PD;}

pu|pen_up {return yy::parser::token::PU;}

send {return yy::parser::token::SEND;}

recv {return yy::parser::token::RECV;}

die {return yy::parser::token::DIE;}

 /*Creating comparison operations tokens*/
"==" {return yy::parser::token::EQ;}

"!=" {return yy::parser::token::NEQ;}

">" {return yy::parser::token::GT;}

">=" {return yy::parser::token::GEQ;}

"<" {return yy::parser::token::LS;}

"<=" {return yy::parser::token::LEQ;}

and|& {return yy::parser::token::AND;}

or|\| {return yy::parser::token::OR;}

xor|^ {return yy::parser::token::XOR;}

not|! {return yy::parser::token::NOT;}

 /*Creating loops (except 'for') and conditional tokens*/
repeat {return yy::parser::token::RPT;}

while {return yy::parser::token::WHL;}

if {return yy::parser::token::IF;}

else {return yy::parser::token::ELSE;}

 /*Creating agent and function tokens*/
new {return yy::parser::token::NEW;} 

agent {return yy::parser::token::AGT;}

function {return yy::parser::token::FCT;}

 /*Creating tokens type*/
null_t {pyylval->v=make_shared<stibbons::TypeValue>(stibbons::Type::NIL); 
	return yy::parser::token::TYPE;}

number_t {pyylval->v=make_shared<stibbons::TypeValue>(stibbons::Type::NUMBER); 
	return yy::parser::token::TYPE;}

boolean_t {pyylval->v=make_shared<stibbons::TypeValue>(stibbons::Type::BOOLEAN); 
	return yy::parser::token::TYPE;}

string_t {pyylval->v=make_shared<stibbons::TypeValue>(stibbons::Type::STRING); 
	return yy::parser::token::TYPE;}

color_t {pyylval->v=make_shared<stibbons::TypeValue>(stibbons::Type::COLOR); 
	return yy::parser::token::TYPE;}

table_t {pyylval->v=make_shared<stibbons::TypeValue>(stibbons::Type::TABLE); 
	return yy::parser::token::TYPE;}

type_t {pyylval->v=make_shared<stibbons::TypeValue>(stibbons::Type::TYPE); 
	return yy::parser::token::TYPE;}

turtle_t {pyylval->v=make_shared<stibbons::TypeValue>(stibbons::Type::TURTLE); 
	return yy::parser::token::TYPE;}

zone_t {pyylval->v=make_shared<stibbons::TypeValue>(stibbons::Type::ZONE); 
	return yy::parser::token::TYPE;}

world_t {pyylval->v=make_shared<stibbons::TypeValue>(stibbons::Type::WORLD); 
	return yy::parser::token::TYPE;}

 /*Creation loop 'for' tokens*/
for { BEGIN(for_state); return yy::parser::token::FOR; }

<for_state>in {BEGIN(INITIAL); return yy::parser::token_type(':');}
<for_state>':' {BEGIN(INITIAL); return yy::parser::token_type(':');}

 /*Creating string tokens*/
\"\"\" { tmp = std::string(); BEGIN(tpl_quote); }

<tpl_quote>\"\"\" { BEGIN(INITIAL);
	pyylval->v=make_shared<stibbons::String>(tmp); 
	return yy::parser::token::STRING;}
<tpl_quote>[^\"]+ { tmp += yytext; }
<tpl_quote>\"[^\"] { tmp += yytext; }
<tpl_quote>\"\"[^\"] { tmp += yytext; }

\" { tmp = std::string(); BEGIN(dbl_quote); }

<dbl_quote>[^\\\n\"]+ { tmp += yytext; }
<dbl_quote>\\\" { tmp += yytext[1]; }
<dbl_quote>\n { throw stibbons::SyntaxException("New line in a \"string\"",loc->begin); }
<dbl_quote>\" { BEGIN(INITIAL);
	pyylval->v=make_shared<stibbons::String>(tmp); 
	return yy::parser::token::STRING;}
 
\' { tmp = std::string(); BEGIN(spl_quote); }

<spl_quote>[^\\\n\']+ { tmp += yytext; }
<spl_quote>\\\' { tmp += yytext[1]; }
<spl_quote>\n { throw stibbons::SyntaxException("New line in a 'string'",loc->begin); }
<spl_quote>\' { BEGIN(INITIAL);
	pyylval->v=make_shared<stibbons::String>(tmp); 
	return yy::parser::token::STRING;}

<spl_quote,dbl_quote>\\\\ { tmp += yytext[1]; }
<spl_quote,dbl_quote>{
    \\n { tmp += '\n'; }
    \\r { tmp += '\r'; }
    \\t { tmp += '\t'; }
    \\f { tmp += '\f'; }
    \\0 { tmp += '\0'; }
}

 /*Creating number tokens*/
[0-9]+(\.[0-9]*)?|\.[0-9]+ {std::istringstream iss(yytext); double n; iss >> n; pyylval->v=make_shared<stibbons::Number>(n); return yy::parser::token::NUMBER;}

 /*Creating color tokens*/
#([a-f0-9]{6}|[a-f0-9]{3}) {pyylval->v=make_shared<stibbons::Color>(yytext); return yy::parser::token::COLOR;}

 /*Creating identifying variables tokens*/
{id} {pyylval->v=make_shared<stibbons::String>(yytext); return yy::parser::token::ID;}

 /*Creating comment tokens*/
"//"[^\n]*\n* { loc->lines(countNewLine(yytext)); loc->step(); return yy::parser::token_type('\n');}

"/*" {BEGIN(comment);}

<comment>[^*]
<comment>"*"+[^*/]*
<comment>\n\n* {loc->lines(yyleng); loc->step();}
<comment>"*"+"/" {BEGIN(INITIAL);}

[ \r\t]+  {loc->step();}

\n\n* { loc->lines(yyleng); loc->step(); return yy::parser::token_type(yytext[0]);}

. {return yy::parser::token_type(yytext[0]);}

%%

/*
 * Editor modelines  -  http://www.wireshark.org/tools/modelines.html
 *
 * Local variables:
 * mode: c++
 * c-basic-offset: 4
 * tab-width: 4
 * indent-tabs-mode: t
 * truncate-lines: 1
 * End:
 *
 * vim:set ft=cpp ts=4 sw=4 sts=4
 */
