/*Define tokens */
%{
#include <cstdlib>
#include "y.tab.h"
#include "../model/nil.h"
#include "../model/number.h"
#include "../model/string.h"
#include "../model/boolean.h"
#include "../model/color.h"

#define YY_USER_ACTION loc->columns(yyleng);
#define yyterminate() {}
%}

%option yylineno
%option noyywrap nounput
%option case-insensitive

 /*Rules*/
%%

%{
loc->step();
%}

true|false {if(yytext[0] == 't' || yytext[0] == 'T') { pyylval->v = new stibbons::Boolean(true); } else { pyylval->v = new stibbons::Boolean(false); } return yy::parser::token::BOOLEAN;}

null {return yy::parser::token::NIL;}

fd|forward {return yy::parser::token::FD;}

lt|turn-left {return yy::parser::token::LT;}

rt|turn-right {return yy::parser::token::RT;}

pd|pen-down {return yy::parser::token::PD;}

pu|pen-up {return yy::parser::token::PU;}

die {return yy::parser::token::DIE;}

"==" {return yy::parser::token::EQ;}

"!=" {return yy::parser::token::NEQ;}

">" {return yy::parser::token::GT;}

">=" {return yy::parser::token::GEQ;}

"<" {return yy::parser::token::LS;}

"<=" {return yy::parser::token::LEQ;}

and|& {return yy::parser::token::AND;}

or|\| {return yy::parser::token::OR;}

xor|^ {return yy::parser::token::XOR;}

not|! {return yy::parser::token::NOT;}

repeat {return yy::parser::token::RPT;}

"while" {return yy::parser::token::WHL;}

[1-9]*\.?[0-9]+ {pyylval->v=new stibbons::Number(atof(yytext)); return yy::parser::token::NUMBER;}

(\"(\\\"|[^\"])*\")|('(\\'|[^'])*')|(\"\"\"(.|\\n)*\"\"\")  {pyylval->v=new stibbons::String(yytext); return yy::parser::token::STRING;}

#([a-f0-9]{6}|[a-f0-9]{3}) {pyylval->v=new stibbons::Color(yytext); return yy::parser::token::COLOR;}

[_a-z][\-_a-z0-9]* {pyylval->v=new stibbons::String(yytext); return yy::parser::token::ID;}

"//"[^\n]*\n+ { loc->lines(yyleng); loc->step(); return yy::parser::token_type('\n');}

"/*"([^*]|"*"+[^*/])*"*"+"/" ;

[ \r\t]*  {loc->step();}

\{\n* {return yy::parser::token::LB;}

\}\n* {return yy::parser::token::RB;}

\(\n* {return yy::parser::token::LP;}

\) {return yy::parser::token::RP;}

\n\n* { loc->lines(yyleng); loc->step(); return yy::parser::token_type(yytext[0]);}

. {return yy::parser::token_type(yytext[0]);}

%%
