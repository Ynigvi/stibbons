/*Define tokens */
%{
	#define NUMBER 300
	#define STRING 301
	#define BOOLEAN 302
	#define NIL 303
	#define ID 304
	#define FD 305
	#define LT 306
	#define RT 307
	#define PU 308
	#define PD 309
	#define DIE 310

	#include <cstdlib>
	#include <iostream>
	
	union{
		char* s;
		double d;
	}yylval;
%}

%option noyywrap
%option case-insensitive
 
/*Rules*/
%%

true|false {yylval.s = strdup(yytext); return BOOLEAN;}

null {yylval.s = strdup(yytext); return BOOLEAN;}

fd|forward {yylval.s = strdup(yytext); return BOOLEAN;}

lt|turn-left {yylval.s = strdup(yytext); return BOOLEAN;}

rt|turn-right {yylval.s = strdup(yytext); return BOOLEAN;}

pd|pen-down {yylval.s = strdup(yytext); return BOOLEAN;} 

pu|pen-up {yylval.s = strdup(yytext); return BOOLEAN;}

die {yylval.s = strdup(yytext); return BOOLEAN;} 

"==" {yylval.s = strdup(yytext); return BOOLEAN;}

"!=" {yylval.s = strdup(yytext); return BOOLEAN;}

">" {yylval.s = strdup(yytext); return BOOLEAN;} 

">=" {yylval.s = strdup(yytext); return BOOLEAN;}

"<" {yylval.s = strdup(yytext); return BOOLEAN;} 

"<=" {yylval.s = strdup(yytext); return BOOLEAN;}

and|& {yylval.s = strdup(yytext); return BOOLEAN;} 

or|\| {yylval.s = strdup(yytext); return BOOLEAN;} 

xor|^ {yylval.s = strdup(yytext); return BOOLEAN;} 

not|! {yylval.s = strdup(yytext); return BOOLEAN;} 

repeat {yylval.s = strdup(yytext); return BOOLEAN;}

while {yylval.s = strdup(yytext); return BOOLEAN;}

if {yylval.s = strdup(yytext); return BOOLEAN;} 

else {yylval.s = strdup(yytext); return BOOLEAN;} 

[1-9]*\.?[0-9]+ {yylval.s = strdup(yytext); return BOOLEAN;} 

(\"(\\\"|[^\"])*\")|('(\\'|[^'])*')|(\"\"\"(.|\\n)*\"\"\") 

#([a-f0-9]{6}|[a-f0-9]{3}) {yylval.s = strdup(yytext); return BOOLEAN;} 

[_a-z][\-_a-z0-9]* {yylval.s = strdup(yytext); return BOOLEAN;}

"//"[^\n]*\n* {yylval.s = "NL"; return BOOLEAN;} 

"/*"([^*]|"*"+[^*/])*"*"+"/" ;

		     [ \r\t]+ ;

\{\n* {yylval.s = "{"; return BOOLEAN;} 

\n*\} {yylval.s = "}"; return BOOLEAN;} 

\(\n* {yylval.s = "("; return BOOLEAN;} 

\) {yylval.s = strdup(yytext); return BOOLEAN;} 

\n+ {yylval.s = "NL"; return BOOLEAN;}

. {yylval.s = strdup(yytext); return BOOLEAN;}

%%
/*Program*/
int main(){
    int j;
    yyFlexLexer* lex = new yyFlexLexer();
    while(0!=(j=lex->yylex())){
      std::cout<<yylval.s<<std::endl;
    }
    return 0;
}
