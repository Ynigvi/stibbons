%skeleton "lalr1.cc"
%defines
%locations
%parse-param { stibbons::FlexScanner &scanner }
%parse-param { stibbons::TreePtr t }
%parse-param { stibbons::TablePtr w }
%lex-param   { stibbons::FlexScanner &scanner }

%code requires {
	namespace stibbons {
		class FlexScanner;
	}
#include "tree.h"
#include "../model/table.h"
#include "../model/string.h"
#include "../model/number.h"
#define YYSTYPE struct { stibbons::ValuePtr v; stibbons::TreePtr tr; int tok; }
	std::string toString(const int& tok);
 }

%code {
#include "flex-scanner.h"
#include "syntax-exception.h"
	using namespace std;

	static int yylex(yy::parser::semantic_type* pyylval, 
					 yy::parser::location_type* loc, 
					 stibbons::FlexScanner &scanner);

	void yy::parser::error(const location& loc,string const& s) { 
		throw stibbons::SyntaxException(s.c_str(),loc.begin);
	}

	static int yylex(yy::parser::semantic_type* pyylval, 
					 yy::parser::location_type* loc, 
					 stibbons::FlexScanner &scanner) {
		return scanner.yylex(pyylval,loc);

	}

  std::string toString(const int& tok) {
    switch(tok) {
    case yy::parser::token::SEQ:
      return "SEQ";
    case yy::parser::token::FD:
      return "FD";
    case yy::parser::token::RT:
      return "RT";
    case yy::parser::token::LT:
      return "LT";
    case yy::parser::token::PU:
      return "PU";
    case yy::parser::token::PD:
      return "PD";
    case yy::parser::token::SEND:
      return "SEND";
    case yy::parser::token::RECV:
      return "RECV";
    case yy::parser::token::DIE:
      return "DIE";
    case yy::parser::token::AND:
      return "AND";
    case yy::parser::token::OR:
      return "OR";
    case yy::parser::token::XOR:
      return "XOR";
    case yy::parser::token::NOT:
      return "NOT";
    case yy::parser::token::EQ:
      return "EQ";
    case yy::parser::token::NEQ:
      return "NEQ";
    case yy::parser::token::GT:
      return "GT";
    case yy::parser::token::GEQ:
      return "GEQ";
    case yy::parser::token::LS:
      return "LS";
    case yy::parser::token::LEQ:
      return "LEQ";
    case yy::parser::token::CALL:
      return "CALL";
    case yy::parser::token::RPT:
      return "RPT";
    case yy::parser::token::WHL:
      return "WHL";
    case yy::parser::token::END:
      return "END";
    case yy::parser::token::IF:
      return "IF";
    case yy::parser::token::ELSE:
      return "ELSE";
    case yy::parser::token::FCT:
      return "FCT";
    case yy::parser::token::NEW:
      return "NEW";
    case yy::parser::token::AGT:
      return "AGT";
    case yy::parser::token::NUMBER:
      return "NUMBER";
    case yy::parser::token::STRING:
      return "STRING";
    case yy::parser::token::COLOR:
      return "COLOR";
    case yy::parser::token::BOOLEAN:
      return "BOOLEAN";
    case yy::parser::token::NIL:
      return "NIL";
    case yy::parser::token::ID:
      return "ID";
    case yy::parser::token::TABLE:
      return "TABLE";
    case yy::parser::token::PAIR:
      return "PAIR";
    case yy::parser::token::UNARYMINUS:
      return "-";
    case yy::parser::token::FOR:
      return "FOR";
    default:
      return std::string(1,static_cast<char>(tok));
    }
  }
}

%token SEQ 0      "sequence"
%token FD         "forward"
%token LT         "turn-left"
%token RT         "turn-right"
%token PU         "pen-up"
%token PD         "pen-down"
%token SEND         "send"
%token RECV         "recv"
%token DIE        "die"
%token AND        "and"
%token OR         "or"
%token XOR        "xor"
%token NOT        "not" 
%token EQ         "=="
%token NEQ        "!="
%token GT         ">"
%token GEQ        ">="
%token LS         "<"
%token LEQ        "<="
%token RPT        "repeat"
%token WHL        "while"
%token END        "end of file"
%token IF         "if"
%token ELSE       "else" 
%token FCT        "function"
%token NEW        "new"
%token AGT        "agent"
%token CALL       "call"
%token TABLE      "table"
%token PAIR       "pair"
%token UNARYMINUS "-"
%token FOR        "for"
%token IN         "in"
%token ATT_ID
%token TAB_ID
%token <v> NUMBER
%token <v> STRING
%token <v> COLOR
%token <v> BOOLEAN 
%token <v> NIL
%token <v> TYPE
%token <v> ID
%type <tr> nb_agt
%type <tr> statement_list
%type <tr> statement_list_bloc
%type <tr> statement
%type <tr> instr_turtle
%type <tr> compl_statement
%type <tr> bloc
%type <tr> expr
%type <tr> lit
%type <tr> assignment_expression
%type <tr> expr_statement
%type <tr> expr_no_separator
%type <tr> decl_statement
%type <tr> creat_statement
%type <tr> primary_expr
%type <tr> loop
%type <tr> for_expr
%type <tr> selection
%type <tr> decl_list
%type <tr> id_list
%type <tr> initializer_list
%type <tr> table_list
%type <tr> expr_list
%type <tr> pair_list
%type <tr> pair
%type <tok> binary_operator
%type <tok> decl_id

%right '='
%left AND OR XOR 
%left EQ NEQ
%left GT GEQ LS LEQ
%left '+' '-'  
%left '*' '/' '%'
%right MOINSUNAIRE NOT
%nonassoc '{' '}' '(' ')'
%%
code : world_dir_list statement_list { t->addChild($2); }
| statement_list { t->addChild($1); }
;

world_dir_list : world_dir {}
| world_dir_list world_dir {}
;

world_dir : '%' ID lit '\n' 
{ 
	auto val = std::get<1>($3->getNode());
	w->setValue(dynamic_pointer_cast<stibbons::String>($2)->getValue(),val); 
}
| '%' ID ID '\n' 
{ 
	w->setValue(dynamic_pointer_cast<stibbons::String>($2)->getValue(),$3); 
}
| '\n' {}
;

// General languages struct

statement_list : statement
{
  $$ = $1; 
}
| statement_list statement 
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(0,nullptr);
  try {
    t1->mergeTree($1);
  }
  catch(std::exception& e) {
    t1->addChild($1);
  }
  t1->addChild($2);
  $$ = t1; 
}
| { $$ = nullptr; } 
;

statement : expr_statement { $$ = $1; }
| compl_statement { $$ = $1; }
;

compl_statement : bloc { $$ = $1; }
| decl_statement { $$ = $1; }
| selection { $$ = $1; }
| loop { $$ = $1; }
| compl_statement '\n' { $$ = $1; }
;

bloc : '{' '}' { $$ = nullptr; }
| '{' statement_list_bloc '}' { $$ = $2; }
; 

statement_list_bloc : statement_list { $$ = $1; }
| statement_list expr_no_separator {
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(0,nullptr);
  try {
    t1->mergeTree($1);
  }
  catch(std::exception& e) {
    t1->addChild($1);
  }
  t1->addChild($2);
  $$ = t1; 
}
;

decl_statement : decl_id ID decl_list bloc {
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>($1,$2);
  t1->setPosition({@1.begin.line,@1.begin.column});
  t1->addChild($4);
  t1->appendChildren($3);
  $$ = t1;  
}
;

decl_id : AGT { $$ = yy::parser::token::AGT; }
| FCT { $$ = yy::parser::token::FCT; }
;

decl_list : '(' ')' { $$ = nullptr; }
| '(' id_list ')' { $$ = $2; }
;

id_list : ID 
{ 
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::ID,nullptr);
  t1->addChild(make_shared<stibbons::Tree>(yy::parser::token::ID,$1));
  $$ = t1;
}
| id_list ',' ID 
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::ID,nullptr);
  t1->appendChildren($1);
  t1->addChild(make_shared<stibbons::Tree>(yy::parser::token::ID,$3));
  $$ = t1;
};

selection : IF expr statement 
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::IF,nullptr);
  t1->addChild($2);
  t1->addChild($3);
  t1->setPosition({@1.begin.line,@1.begin.column});
  $$ = t1;
}
| IF expr statement ELSE statement
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::IF,nullptr);
  t1->addChild($2);
  t1->addChild($3);
  t1->addChild($5);
  t1->setPosition({@1.begin.line,@1.begin.column});
  $$ = t1;
};

loop : RPT expr statement
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::RPT,nullptr);
  t1->addChild($2);
  t1->addChild($3);
  t1->setPosition({@1.begin.line,@1.begin.column});
  $$ = t1;  
}
| WHL expr statement
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::WHL,nullptr);
  t1->addChild($2);
  t1->addChild($3);
  t1->setPosition({@1.begin.line,@1.begin.column});
  $$ = t1;  
}
| FOR for_expr statement 
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::FOR,nullptr);
  t1->addChild($2);
  t1->addChild($3);
  t1->setPosition({@1.begin.line,@1.begin.column});
  $$ = t1;	
}
;

for_expr : '(' for_expr ')' { $$ = $2; }
| ID ':' expr
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::FOR,$1);
  t1->addChild($3);
  t1->setPosition({@1.begin.line,@1.begin.column});
  $$ = t1;	
}
| ID ',' ID ':' expr
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::FOR,$3);
  t1->addChild($5);
  t1->addChild(make_shared<stibbons::Tree>(yy::parser::token::ID,$1));
  t1->setPosition({@1.begin.line,@1.begin.column});
  $$ = t1;	
}
;

expr_statement : '\n' { $$ = nullptr; }
| expr '\n' { $$ = $1; }
| instr_turtle '\n' { $$ = $1; }
| creat_statement '\n' { $$ = $1; }
;

expr_no_separator : expr { $$ = $1; }
| instr_turtle { $$ = $1; }
| creat_statement { $$ = $1; }
;


expr : assignment_expression { $$ = $1; }
| '(' expr ')' { $$ = $2; }
| expr binary_operator expr
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>($2,nullptr);
  t1->addChild($1);
  t1->addChild($3);
  t1->setPosition({@1.begin.line,@1.begin.column});
  $$ = t1;
}
| '-' expr %prec UNARYMINUS 
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::UNARYMINUS,nullptr);
  t1->addChild($2);
  $$ = t1;
}
| NOT expr
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::NOT,nullptr);
  t1->addChild($2);
  $$ = t1;
}
| primary_expr { $$ = $1; }
| lit { $$ = $1; }
;

binary_operator : '+' { $$ = '+'; }
| '-' { $$ = '-'; }
| '/' { $$ = '/'; }
| '*' { $$ = '*'; }
| '%' { $$ = '%'; }
| AND { $$ = yy::parser::token::AND; }
| OR { $$ = yy::parser::token::OR; }
| XOR { $$ = yy::parser::token::XOR; }
| EQ { $$ = yy::parser::token::EQ; }
| NEQ { $$ = yy::parser::token::NEQ; }
| GT { $$ = yy::parser::token::GT; }
| GEQ { $$ = yy::parser::token::GEQ; }
| LS { $$ = yy::parser::token::LS; }
| LEQ { $$ = yy::parser::token::LEQ; }
;

assignment_expression : primary_expr '=' expr
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>('=',nullptr);
  t1->addChild($1);
  t1->addChild($3);
  $$ = t1;
}
| primary_expr '=' '{' table_list '}'
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>('=',nullptr);
  t1->addChild($1);
  t1->addChild($4);
  $$ = t1;
}
;

primary_expr : ID
{
  $$ = make_shared<stibbons::Tree>(yy::parser::token::ID,$1);
}
| primary_expr '.' ID
{
  auto t1 = make_shared<stibbons::Tree>(yy::parser::token::ATT_ID,$3);
  t1->addChild($1);
  $$ = t1;
}
| primary_expr '[' expr ']'
{
  auto t1 = make_shared<stibbons::Tree>(yy::parser::token::TAB_ID,nullptr);
  t1->addChild($1);
  t1->addChild($3);
  $$ = t1;
}
| primary_expr '[' ']'
{
  auto t1 = make_shared<stibbons::Tree>(yy::parser::token::TAB_ID,nullptr);
  t1->addChild($1);
  $$ = t1;
}
| ID '(' ')'
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::CALL,$1);
  t1->setPosition({@1.begin.line,@1.begin.column});
  $$ = t1;
}
| ID '(' initializer_list ')'
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::CALL,$1);
  t1->setPosition({@1.begin.line,@1.begin.column});
  t1->appendChildren($3);
  $$ = t1;
}
;

table_list : expr_list { $$ = $1; }
| pair_list { $$ = $1; }
| { $$ = make_shared<stibbons::Tree>(yy::parser::token::TABLE,nullptr); };

expr_list : expr
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::TABLE,nullptr);
  t1->addChild($1);
  $$ = t1;
}
| expr_list ',' expr
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::TABLE,nullptr);
  t1->appendChildren($1);
  t1->addChild($3);
  $$ = t1;
}
;

pair_list : pair
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::TABLE,nullptr);
  t1->addChild($1);
  $$ = t1;
}
| pair_list ',' pair
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::TABLE,nullptr);
  t1->appendChildren($1);
  t1->addChild($3);
  $$ = t1;
}
;

pair : expr ':' expr
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::PAIR,nullptr);
  t1->addChild($1);
  t1->addChild($3);
  $$ = t1;	
}
;

initializer_list : expr
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::CALL,nullptr);
  t1->addChild($1);
  $$ = t1;
}
| initializer_list ',' expr
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::CALL,nullptr);
  t1->appendChildren($1);
  t1->addChild($3);
  $$ = t1;
}
;

creat_statement : nb_agt NEW AGT bloc
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::NEW,nullptr);
  t1->setPosition({@1.begin.line,@1.begin.column});
  t1->addChild($1);
  t1->addChild($4);
  $$ = t1;
}
| nb_agt NEW ID '(' initializer_list ')'
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::NEW,$3);
  t1->setPosition({@1.begin.line,@1.begin.column});
  t1->addChild($1);
  t1->addChild($5);
  $$ = t1;
}
| nb_agt NEW ID '(' ')'
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::NEW,$3);
  t1->addChild($1);
  t1->addChild(make_shared<stibbons::Tree>(yy::parser::token::NEW,nullptr));
  t1->setPosition({@1.begin.line,@1.begin.column});
  $$ = t1;
}
| primary_expr '=' creat_statement
{
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>('=',nullptr);
  t1->addChild($1);
  t1->addChild($3);
  $$ = t1;
}
;

nb_agt : NUMBER 
{ 
  $$ = make_shared<stibbons::Tree>(yy::parser::token::NUMBER,$1);
}
| primary_expr
{ 
	$$ = $1;
}
| 
{ 
  stibbons::ValuePtr nb = make_shared<stibbons::Number>(1.0);
  $$ = make_shared<stibbons::Tree>(yy::parser::token::NUMBER,nb); 
}
;

// Turtle instructions

instr_turtle : FD expr
{ 
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::FD,nullptr);
  t1->addChild($2);
  t1->setPosition({@1.begin.line,@1.begin.column});
  $$ = t1; 
}
| LT expr
{ 
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::LT,nullptr);
  t1->addChild($2);
  t1->setPosition({@1.begin.line,@1.begin.column});
  $$ = t1; 
}
| RT expr
{ 
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::RT,nullptr);
  t1->addChild($2);
  t1->setPosition({@1.begin.line,@1.begin.column});
  $$ = t1; 
}
| PU
{ 
  $$ = make_shared<stibbons::Tree>(yy::parser::token::PU,nullptr);
}
| PD
{ 
  $$ = make_shared<stibbons::Tree>(yy::parser::token::PD,nullptr);
}
| SEND expr expr
{ 
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::SEND,nullptr);
  t1->addChild($2);
  t1->addChild($3);
  t1->setPosition({@1.begin.line,@1.begin.column});
  $$ = t1; 
}
| SEND expr
{ 
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::SEND,nullptr);
  t1->addChild($2);
  t1->setPosition({@1.begin.line,@1.begin.column});
  $$ = t1; 
}
| RECV primary_expr primary_expr
{ 
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::RECV,nullptr);
  t1->addChild($2);
  t1->addChild($3);
  t1->setPosition({@1.begin.line,@1.begin.column});
  $$ = t1; 
}
| RECV primary_expr
{ 
  stibbons::TreePtr t1 = make_shared<stibbons::Tree>(yy::parser::token::RECV,nullptr);
  t1->addChild($2);
  t1->setPosition({@1.begin.line,@1.begin.column});
  $$ = t1; 
}
| DIE 
{ 
  $$ = make_shared<stibbons::Tree>(yy::parser::token::DIE,nullptr);
};

lit : NUMBER { $$ = make_shared<stibbons::Tree>(yy::parser::token::NUMBER,$1); }
| STRING { $$ = make_shared<stibbons::Tree>(yy::parser::token::STRING,$1); }
| BOOLEAN { $$ = make_shared<stibbons::Tree>(yy::parser::token::BOOLEAN,$1); }
| COLOR { $$ = make_shared<stibbons::Tree>(yy::parser::token::COLOR,$1); }
| NIL { $$ = make_shared<stibbons::Tree>(yy::parser::token::NIL,$1); }
| TYPE { $$ = make_shared<stibbons::Tree>(yy::parser::token::TYPE,$1); };

%%

  /*
   * Editor modelines  -  http://www.wireshark.org/tools/modelines.html
   *
   * Local variables:
   * mode: c++
   * c-basic-offset: 4
   * tab-width: 4
   * indent-tabs-mode: t
   * truncate-lines: 1
   * End:
   *
   * vim:set ft=cpp ts=4 sw=4 sts=4
   */
